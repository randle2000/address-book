<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security.xsd">
	
    <!-- enable use-expressions -->
	<http auto-config="true" use-expressions="true">
		<intercept-url pattern="/contacts/**" access="hasRole('ROLE_USER')" />
		<intercept-url pattern="/register/update/**" access="hasAnyRole('ROLE_ADMIN,ROLE_USER')" />
		
		<headers>
			<cache-control />
		</headers>
		
		<!-- access denied page -->
		<access-denied-handler error-page="/403" />
		
		<!--
		login-processing-url is the URL that Spring will intercept. 
		your login form should POST to it. The default value is "/j_spring_security_check"
		see http://docs.spring.io/spring-security/site/docs/3.2.3.RELEASE/reference/htmlsingle/#remember-me 
		login-page - Custom login page url path
		default-target-url - url where the user should navigate after successful login
		authentication-failure-url - url where the user should navigate after a login failure
		username-parameter and password-parameter - These two are optional.
			By default spring-security accepts the parameter names “j_username” and “j_password”
			as username and password in the login form.
		--> 
		<form-login 
		    login-page="/login" 
		    default-target-url="/welcome"
			authentication-failure-url="/login?error"
			username-parameter="email"
			password-parameter="pwd" 
			login-processing-url="/auth/login_check"
			authentication-success-handler-ref="savedRequestAwareAuthenticationSuccessHandler" />
		<logout logout-success-url="/login?logout" delete-cookies="JSESSIONID" />
		
		<!-- enable csrf protection -->
		<csrf/> 
		
		<remember-me 
			user-service-ref="userService"
		    token-validity-seconds="1209600"
			remember-me-parameter="remember-me" 
			data-source-ref="dataSource" />
	</http>

	<!-- for remember me token -->
	<beans:bean id="savedRequestAwareAuthenticationSuccessHandler" class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
		<beans:property name="targetUrlParameter" value="targetUrl" />
	</beans:bean>

	<!-- my custom authentication provider (com.sln.abook.service.UserServiceImpl implements UserDetailsService) -->
	<authentication-manager>
		<authentication-provider user-service-ref="userService" />
	</authentication-manager>
	<!-- following bean is remmed because it will be picked up by component-scan -->
	<!-- <beans:bean id="userService" class="com.sln.abook.service.UserServiceImpl" /> -->
	
	<!-- Simple in-memory auth manager - ->
	<authentication-manager id="in-memory-auth">
		<authentication-provider>
			<user-service>
				<user name="uname" password="pass" authorities="Admin" />
			</user-service>
		</authentication-provider>
	</authentication-manager>
	-->
	
	<!-- Select users and user_roles from database - ->
	<authentication-manager>
		<authentication-provider>
			<jdbc-user-service data-source-ref="dataSource"
				users-by-username-query="SELECT Email as username, Password as password, Enabled FROM users where Email = ?"
				authorities-by-username-query="SELECT Email as username, RoleName as authority FROM userrole where Email = ?" />
		</authentication-provider>
	</authentication-manager>
	-->
	
</beans:beans>